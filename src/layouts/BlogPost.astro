---
import type { CollectionEntry } from "astro:content";
import OuterLayout from "../layouts/OuterLayout.astro";
import FormattedDate from "../components/FormattedDate.svelte";
import Bio from "../components/Bio.astro";
import RandomCaseyFact from "../components/RandomCaseyFact.svelte";
import Tag from "../components/Tag.svelte";
import MastodonEmbed from "../components/MastodonEmbed.astro";
import SuggestToSubscribe from "../components/SuggestToSubscribe.astro";
import defaultImage from "../assets/headshot-2.jpg";
import { SEO } from "astro-seo";
import Webmentions from "../components/Webmentions.svelte";
import SEOTags from "../components/SEOTags.svelte";

// type PostData = CollectionEntry<"blog">["data"];

const { post } = Astro.props;

const {
  title,
  tagline,
  description,
  pubDate,
  updatedDate,
  heroImage,
  emoji,
  mastodonURL,
  tags
} = post.data;

const titleWithEmoji = emoji + " " + title;
const titleWithTagline = titleWithEmoji + " - " + tagline;
const url = `https://www.caseywatts.com${Astro.url.pathname}`;
const url2 = `www.caseywatts.com${Astro.url.pathname}`;
const image =
  `${Astro.url.origin}${heroImage}` || `${Astro.url.origin}${defaultImage}`;
const editURL = `https://github.com/caseywatts/caseywatts-blog/edit/main/src/content/blog/${post.slug}.mdx`
---

<!-- <script is:inline define:vars={{url2}}>
	const lol = `https://api.countapi.xyz/hit/:HOST:/:PATHNAME:`
	console.log(lol)
	fetch(lol).then(response => response.json()).then(json => {
		console.log(json)
	})
</script> -->
<SEOTags
  title={titleWithEmoji}
  description={description || titleWithTagline}
  image={image}
  contentType="article"
  url={url}
/>

<OuterLayout>
  <div class="panel panel-main">
    <span class="text-2xl">
      <!-- {
			tags && (
				<Tag>{tags}</Tag>
			)
		} -->
    </span>
    <div class="mb-5 flex align-baseline">
      <div class="text-sm"><a href="/blog">⬅️ other posts</a></div>
      <div
        class="flex-1 text-right align-bottom text-sm italic text-violet-600"
      >
      <div>
        Published <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <div class="last-updated-on">
              Updated <FormattedDate date={updatedDate} />
            </div>
          )
        }
        </div>
        <div class="underline">
          <a href={editURL}>suggest an edit</a>
        </div>
      </div>
    </div>
    <article class="prose mx-auto lg:prose-lg">
      <!-- {heroImage && <img width={720} height={360} src={heroImage} alt="" />} -->
      <h1
        class="flex flex-col items-center justify-center align-middle md:flex-row md:space-x-5"
      >
        <div class="flex items-center justify-center align-middle text-8xl">
          <span>{emoji}</span>
        </div>
        <div class="mb-0 flex flex-1 flex-col justify-center align-middle">
          <div>
            {title}
            <div class="mt-1 text-2xl">{tagline}</div>
          </div>
        </div>
      </h1>
      {description && <div class="bg-violet-200 p-4">{description}</div>}
      <slot />
    </article>
  </div>

  <Webmentions url={url} client:only="svelte" />

  <div class="panel panel-main p-4">
    <SuggestToSubscribe />
  </div>

  <!-- <div class="panel panel-main">
	<a href="/blog" class="button-link block">other blog posts</a>
</div> -->

  <div class="panel panel-main">
    <RandomCaseyFact client:only="svelte" />
  </div>
  <div class="panel panel-main">
    <Bio />
  </div>
</OuterLayout>

<script is:inline>
  // allow checkboxes on blog posts
  // I'd rather do this in a [rehype plugin](https://github.com/remarkjs/remark-gfm/issues/41), but this works for now
  document
    .querySelectorAll("input[type=checkbox]")
    .forEach((node) => (node.disabled = false));
</script>
